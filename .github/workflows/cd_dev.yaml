name: CD Develop
on:
  push:
    branches: ["build/dev"]
    # branches:
    #   - 'release/**'
    # tags:
    #  - "*" # Push events to every tag not containing /

env:
  JAVA_VERSION: "12.x"
  FLUTTER_VERSION: "3.10.5"
  TESTER_GROUPS: "testers"
  ENV_PATH: "config/dev.env"

  # Android
  PROPERTIES_PATH: "android/local.properties"
  KEY_STORE_NAME: "release-keystore.jks"
  KEY_STORE_PATH: "android/release-keystore.jks"
  ANDROID_APP_ID: "1:1054080240092:android:b147c8caae3d29623ee719"
  APK_PATH: "build/app/outputs/flutter-apk/app-dev-release.apk"
  APK_FILE_NAME: "app-dev-release.apk"
  GOOGLE_SERVICE_PATH: "android/app/src/dev/"

  # iOS
  IOS_APP_ID: "App Dev"
  # File name is same with $APP_DISPLAY_NAME in .xcconfig file
  IPA_PATH: "build/ios/ipa/dev.ipa"
  IPA_FILE_NAME: "dev.ipa"

  # secrets
  # <-- github -->
  # ACCESS_TOKEN_GITHUB
  # <-- firebase -->
  # FIREBASE_TOKEN
  # get firebase token: https://github.com/wzieba/Firebase-Distribution-Github-Action/wiki/FIREBASE_TOKEN-migration
  # 1. npm install -g firebase-tools
  # 2. firebase login:ci

  # <-- iOS -->
  # DEVELOP_BUILD_PROVISION_PROFILE_BASE64
  # BUILD_CERTIFICATE_BASE64
  # P12_PASSWORD
  # KEYCHAIN_PASSWORD

  # <-- Android -->
  # STORE_PASSWORD
  # KEY_PASSWORD
  # KEY_ALIAS
  # KEYSTORE_BASE64 -> in terminal macOS: base64 -i <path-to-file> || cat <path-to-file> | base64
  # base64 <your-keystore-file.jks>

jobs:
  # version: # https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/index.md
  #   name: Create version number
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - name: Fetch all history for all tags and branches
  #       run: |
  #         git config remote.origin.url https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }}
  #         git fetch --prune --depth=10000
  #     - name: Install GitVersion
  #       uses: gittools/actions/gitversion/setup@v0.9.7
  #       with:
  #         versionSpec: "5.x"
  #     - name: Use GitVersion
  #       id: gitversion
  #       uses: gittools/actions/gitversion/execute@v0.9.7
  #     - name: Create version.txt with nuGetVersion
  #       run: echo ${{ steps.gitversion.outputs.nuGetVersion  }} > version.txt
  #     - name: Upload version.txt
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: gitversion
  #         path: version.txt

  build-android:
    name: Android Build
    # needs: [version]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Mandatory to use the extract version from tag action

      - name: Get version from tag
        id: tag
        uses: 0x01001/get-version-from-tag@v1.0.1

      # - name: Update version in YAML
      #   run: sed -i 's/99.99.99+99/${{ steps.tag.outputs.version }}+${{ github.run_number }}/g' pubspec.yaml

      # - name: Get version.txt
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: gitversion
      # - name: Create new file without newline char from version.txt
      #   run: tr -d '\n' < version.txt > version1.txt
      # - name: Read version
      #   id: version
      #   uses: juliangruber/read-file-action@v1
      #   with:
      #     path: version1.txt
      # - name: Update version in YAML
      #   run: sed -i 's/99.99.99+99/${{ steps.version.outputs.content }}+${{ github.run_number }}/g' pubspec.yaml

      - name: Download Google Services
        id: google_services
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: google-services.json
          fileDir: ${{ env.GOOGLE_SERVICE_PATH }}
          encodedString: ${{ secrets.DEV_GOOGLE_SERVICES }} #cat <path-to-file> | base64

      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.DEV_KEYSTORE_BASE64 }} #cat <path-to-file> | base64

      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > ${{env.PROPERTIES_PATH}}
          echo "storePassword=${{ secrets.DEV_STORE_PASSWORD }}" >> ${{env.PROPERTIES_PATH}}
          echo "keyPassword=${{ secrets.DEV_KEY_PASSWORD }}" >> ${{env.PROPERTIES_PATH}}
          echo "keyAlias=${{ secrets.DEV_KEY_ALIAS }}" >> ${{env.PROPERTIES_PATH}}
          echo "flutter.versionName=${{ steps.tag.outputs.version }}" >> ${{env.PROPERTIES_PATH}}
          echo "flutter.versionCode=${{ github.run_number }}" >> ${{env.PROPERTIES_PATH}}

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: ${{env.JAVA_VERSION}}
          cache: gradle

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}
          channel: "stable"
          cache: true

      - name: Add pub cache bin to PATH
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Add pub cache to PATH
        run: echo "PUB_CACHE="$HOME/.pub-cache"" >> $GITHUB_ENV

      # - name: Cache pub dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ env.FLUTTER_HOME }}/.pub-cache
      #     key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
      #     restore-keys: ${{ runner.os }}-pub-

      - name: Pub get app
        run: flutter pub get

      - name: Run build_runner
        run: make gen

      # - name: Setup ENV
      #   run: |
      #     echo "API_KEY=${{ secrets.DEV_API_KEY }}" > ${{env.ENV_PATH}}
      #     echo "SECRET_KEY=${{ secrets.DEV_SECRET_KEY }}" >> ${{env.ENV_PATH}}
      #     echo "SECRET_IV=${{ secrets.DEV_SECRET_IV }}" >> ${{env.ENV_PATH}}

      # https://github.com/xxxx/app-name/settings/secrets/actions
      - name: Build APK
        run: flutter build apk -t lib/main.dart --flavor dev --build-name=${{ steps.tag.outputs.version }} --build-number=${{ github.run_number }} --dart-define FLAVOR=dev --dart-define API_KEY=${{ secrets.DEV_API_KEY }} --dart-define SECRET_KEY=${{ secrets.DEV_SECRET_KEY }} --dart-define SECRET_IV=${{ secrets.DEV_SECRET_IV }} --dart-define DUMMY_APP_ID=${{ secrets.DUMMY_APP_ID }}

      # - name: Build Android App Bundle
      #   run: flutter build appbundle --build-name=1.0.${{ github.run_number }} --build-number=${{ github.run_number }}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.APK_FILE_NAME}}
          path: ${{env.APK_PATH}}
          retention-days: 1
          if-no-files-found: error

  distribute-android:
    name: Distribute Android
    needs: build-android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v2
        with:
          name: ${{env.APK_FILE_NAME}}

      - name: Upload APK to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
        with:
          appId: ${{env.ANDROID_APP_ID}}
          serviceCredentialsFileContent: ${{secrets.CREDENTIAL_FILE_CONTENT}} #https://github.com/wzieba/Firebase-Distribution-Github-Action/wiki/FIREBASE_TOKEN-migration
          groups: ${{env.TESTER_GROUPS}}
          file: ${{env.APK_FILE_NAME}}
          releaseNotes: "${{ github.event.head_commit.author.name }}: ${{ github.event.head_commit.message }}"
          # debug: true

      # - name: Deploy to Play Store
      #   uses: r0adkll/[email protected]
      #   with:
      #     serviceAccountJsonPlainText: ${{secrets.GOOGLE_SERVICE_ACCOUNT_KEY}}
      #     packageName: ${{ secrets.ANDROID_PACKAGE_NAME }}
      #     releaseFiles: build/app/outputs/bundle/release/app-release.aab
      #     track: internal
      #     status: draft

  # build-ios:
  #   runs-on: macos-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     # Install the Apple certificate and provisioning profile
  #     - name: Install the Apple certificate and provisioning profile
  #       env:
  #         BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
  #         P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  #         BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.DEVELOP_BUILD_PROVISION_PROFILE_BASE64 }}
  #         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #       run: |
  #         # create variables
  #         CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #         PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  #         # import certificate and provisioning profile from secrets
  #         echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
  #         echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
  #         # create temporary keychain
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         # import certificate to keychain
  #         security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH
  #         # apply provisioning profile
  #         mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #         cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

  #     - uses: actions/setup-java@v1
  #       with:
  #         java-version: ${{env.JAVA_VERSION}}
  #     - uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{env.FLUTTER_VERSION}}
  #         channel: 'stable'

  #     - name: Add pub cache bin to PATH
  #       run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

  #     - name: Add pub cache to PATH
  #       run: echo "PUB_CACHE="$HOME/.pub-cache"" >> $GITHUB_ENV

  #     - name: pub get app
  #       run: flutter pub get

  #     - name: Run build_runner
  #       run: make gen

  #     - name: Build IPA
  #       run: make build_dev_ipa

  #     - name: Upload IPA artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: ${{env.IPA_FILE_NAME}}
  #         path: ${{env.IPA_PATH}}
  #         retention-days: 1
  #         if-no-files-found: error

  #     - name: Clean up keychain and provisioning profile
  #       if: ${{ always() }}
  #       run: |
  #         security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
  #         rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  # distribute-ios:
  #   needs: build-ios
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: ${{env.IPA_FILE_NAME}}

  #     - name: Upload IPA to Firebase App Distribution
  #       uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
  #       with:
  #         appId: ${{env.IOS_APP_ID}}
  #         token: ${{secrets.FIREBASE_TOKEN}}
  #         groups: ${{env.TESTER_GROUPS}}
  #         file: ${{env.IPA_FILE_NAME}}
  #         releaseNotes: "${{ github.event.head_commit.author.name }}: ${{ github.event.head_commit.message }}"
